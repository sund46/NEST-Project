<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
		 <!-- mail bean -->
<beans:bean id="javaMailSender" 
    class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <beans:property name="host" value="smtp.naver.com"/>
    <beans:property name="port" value="465"/>        
    <beans:property name="username" value="nestcor@naver.com"/>
    <beans:property name="password" value="nestnest!@#"/>
    <beans:property name="protocol" value="smtps"/>        
    <beans:property name="defaultEncoding" value="utf-8"/>
    <beans:property name="javaMailProperties">
        <beans:props>
            <beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
            <beans:prop key="mail.smtp.auth">true</beans:prop>
            <beans:prop key="mail.smtp.ssl.checkserveridentity">true</beans:prop>
            <beans:prop key="mail.smtp.ssl.trust">*</beans:prop>
        </beans:props>
    </beans:property>        
</beans:bean>
	
	<context:component-scan base-package="com.nestCor.nest" />
	
	<!-- 파일 업로드 전용 MultipartResolver 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<beans:property name="maxUploadSize" value="1000000000"/>
	 <!--  1000MB  -->
	</beans:bean>
	<!-- 2. jsonView와 viewResolver 등록하기 -->
   <!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
   <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
      <beans:property name="order" value="1"/>
   </beans:bean>

   <beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
   
   <!-- 4. HttpMessageConverter 등록하기 (Spring 5.x.x 버전부터 Jackson2 버전으로 제공) -->
   <beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
   
   <!-- 3. @ResponseBody 어노테이션 등록하기 -->
   <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
      <beans:property name="messageConverters">
         <beans:list>
            <beans:ref bean="jacksonMessageConverter"/>
         </beans:list>
      </beans:property>
   </beans:bean>
</beans:beans>
